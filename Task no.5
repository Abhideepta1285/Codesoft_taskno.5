TASK 5

Contact Information: Store name, phone number, email, and address for each contact.

Add Contact: Allow users to add new contacts with their details.

View Contact List: Display a list of all saved contacts with names and phone numbers.
Search Contact: Implement a search function to find contacts by name or phone number.

Update Contact: Enable users to update contact details.
Delete Contact: Provide an option to delete a contact.

User Interface: Design a user-friendly interface for easy interaction.

CODE-
class ContactManager:
    def __init__(self):
        self.contacts = []

    def add_contact(self, name, phone, email, address):
        self.contacts.append({
            "name": name,
            "phone": phone,
            "email": email,
            "address": address
        })
        print(f"Contact {name} added successfully!")

    def view_contacts(self):
        if not self.contacts:
            print("No contacts found.")
        else:
            for idx, contact in enumerate(self.contacts, start=1):
                print(f"{idx}. {contact['name']} - {contact['phone']}")

    def search_contact(self, keyword):
        results = [c for c in self.contacts if keyword in c["name"] or keyword in c["phone"]]
        if results:
            for contact in results:
                print(f"Name: {contact['name']}, Phone: {contact['phone']}, Email: {contact['email']}, Address: {contact['address']}")
        else:
            print("No contacts found.")

    def update_contact(self, name, new_phone=None, new_email=None, new_address=None):
        for contact in self.contacts:
            if contact["name"] == name:
                if new_phone:
                    contact["phone"] = new_phone
                if new_email:
                    contact["email"] = new_email
                if new_address:
                    contact["address"] = new_address
                print(f"Contact {name} updated successfully!")
                return
        print("Contact not found.")

    def delete_contact(self, name):
        for contact in self.contacts:
            if contact["name"] == name:
                self.contacts.remove(contact)
                print(f"Contact {name} deleted successfully!")
                return
        print("Contact not found.")


def main():
    manager = ContactManager()
    
    while True:
        print("\nContact Manager Application")
        print("1. Add Contact")
        print("2. View Contacts")
        print("3. Search Contact")
        print("4. Update Contact")
        print("5. Delete Contact")
        print("6. Exit")
        
        choice = input("Enter your choice: ")
        
        if choice == '1':
            name = input("Enter name: ")
            phone = input("Enter phone: ")
            email = input("Enter email: ")
            address = input("Enter address: ")
            manager.add_contact(name, phone, email, address)
        elif choice == '2':
            manager.view_contacts()
        elif choice == '3':
            keyword = input("Enter name or phone to search: ")
            manager.search_contact(keyword)
        elif choice == '4':
            name = input("Enter name of the contact to update: ")
            new_phone = input("Enter new phone (press Enter to skip): ") or None
            new_email = input("Enter new email (press Enter to skip): ") or None
            new_address = input("Enter new address (press Enter to skip): ") or None
            manager.update_contact(name, new_phone, new_email, new_address)
        elif choice == '5':
            name = input("Enter name of the contact to delete: ")
            manager.delete_contact(name)
        elif choice == '6':
            print("Exiting the application. Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
